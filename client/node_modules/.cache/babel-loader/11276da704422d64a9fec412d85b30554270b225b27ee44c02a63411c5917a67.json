{"ast":null,"code":"var _jsxFileName = \"/home/athulrajt/Music/Socket.io.chat/client/src/Components/SocketChat.jsx\",\n  _s = $RefreshSig$();\nimport React from 'react';\nimport '../Styles/SocketChat.css';\nimport io from \"socket.io-client\"; //to establish the connection\nimport { useState } from \"react\";\nimport Chat from './Chat';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io.connect(\"http://localhost:3001\");\nconst SocketChat = () => {\n  _s();\n  const [username, setUsername] = useState(\"\");\n  const [room, setRoom] = useState(\"\");\n  const [showChat, setShowChat] = useState(false);\n  const joinRoom = () => {\n    if (username !== \"\" && room !== \"\") {\n      //the if condition is -\"if username and room empty string allenkil\" ie, aa rand input tag um emty allenkil\n      socket.emit(\"join_room\", room); // \"join_room\" beckend il ninn eduthathaan , \"room\" mukalil ulla useState aan\n      setShowChat(true); //user name and Id koduthal mathram chat box kanikkan\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"all-sec\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"socket-sec\",\n        children: !showChat ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"joinChatContainer\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            children: \"Join A Chat\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 28,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Your Name\",\n            onChange: event => {\n              setUsername(event.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n            type: \"text\",\n            placeholder: \"Room ID\",\n            onChange: event => {\n              setRoom(event.target.value);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 29\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: joinRoom,\n            children: \"Join A Room\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 43,\n            columnNumber: 29\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 27,\n          columnNumber: 25\n        }, this) : /*#__PURE__*/_jsxDEV(Chat, {\n          socket: socket,\n          username: username,\n          room: room\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 25\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 23,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 22,\n    columnNumber: 9\n  }, this);\n};\n_s(SocketChat, \"PNnIyDYILVrwEYCLw6+QQQ0bQ6k=\");\n_c = SocketChat;\nexport default SocketChat;\nvar _c;\n$RefreshReg$(_c, \"SocketChat\");","map":{"version":3,"names":["React","io","useState","Chat","jsxDEV","_jsxDEV","socket","connect","SocketChat","_s","username","setUsername","room","setRoom","showChat","setShowChat","joinRoom","emit","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","event","target","value","onClick","_c","$RefreshReg$"],"sources":["/home/athulrajt/Music/Socket.io.chat/client/src/Components/SocketChat.jsx"],"sourcesContent":["import React from 'react'\nimport '../Styles/SocketChat.css'\nimport io from \"socket.io-client\"; //to establish the connection\nimport { useState } from \"react\";\nimport Chat from './Chat';\n\nconst socket = io.connect(\"http://localhost:3001\");\n\nconst SocketChat = () => {\n\n    const [username, setUsername] = useState(\"\");\n    const [room, setRoom] = useState(\"\");\n    const [showChat, setShowChat] = useState(false);\n\n    const joinRoom = () => {\n        if (username !== \"\" && room !== \"\") { //the if condition is -\"if username and room empty string allenkil\" ie, aa rand input tag um emty allenkil\n            socket.emit(\"join_room\", room); // \"join_room\" beckend il ninn eduthathaan , \"room\" mukalil ulla useState aan\n            setShowChat(true); //user name and Id koduthal mathram chat box kanikkan\n        }\n    };\n    return (\n        <div>\n            <div className='all-sec'>\n                <div className='socket-sec'>\n                    {/* username and room number add cheythal mathrame chat edukkan pattu */}\n                    {!showChat ? (\n                        <div className=\"joinChatContainer\">\n                            <h3>Join A Chat</h3>\n                            <input\n                                type=\"text\"\n                                placeholder=\"Your Name\"\n                                onChange={(event) => {\n                                    setUsername(event.target.value);\n                                }}\n                            />\n                            <input\n                                type=\"text\"\n                                placeholder=\"Room ID\"\n                                onChange={(event) => {\n                                    setRoom(event.target.value);\n                                }}\n                            />\n                            <button onClick={joinRoom}>Join A Room</button>\n                        </div>\n                    ) : (\n                        <Chat socket={socket} username={username} room={room} />\n                    )}\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default SocketChat\n"],"mappings":";;AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAO,0BAA0B;AACjC,OAAOC,EAAE,MAAM,kBAAkB,CAAC,CAAC;AACnC,SAASC,QAAQ,QAAQ,OAAO;AAChC,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1B,MAAMC,MAAM,GAAGL,EAAE,CAACM,OAAO,CAAC,uBAAuB,CAAC;AAElD,MAAMC,UAAU,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAErB,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACU,IAAI,EAAEC,OAAO,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACY,QAAQ,EAAEC,WAAW,CAAC,GAAGb,QAAQ,CAAC,KAAK,CAAC;EAE/C,MAAMc,QAAQ,GAAGA,CAAA,KAAM;IACnB,IAAIN,QAAQ,KAAK,EAAE,IAAIE,IAAI,KAAK,EAAE,EAAE;MAAE;MAClCN,MAAM,CAACW,IAAI,CAAC,WAAW,EAAEL,IAAI,CAAC,CAAC,CAAC;MAChCG,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;IACvB;EACJ,CAAC;EACD,oBACIV,OAAA;IAAAa,QAAA,eACIb,OAAA;MAAKc,SAAS,EAAC,SAAS;MAAAD,QAAA,eACpBb,OAAA;QAAKc,SAAS,EAAC,YAAY;QAAAD,QAAA,EAEtB,CAACJ,QAAQ,gBACNT,OAAA;UAAKc,SAAS,EAAC,mBAAmB;UAAAD,QAAA,gBAC9Bb,OAAA;YAAAa,QAAA,EAAI;UAAW;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAI,CAAC,eACpBlB,OAAA;YACImB,IAAI,EAAC,MAAM;YACXC,WAAW,EAAC,WAAW;YACvBC,QAAQ,EAAGC,KAAK,IAAK;cACjBhB,WAAW,CAACgB,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;YACnC;UAAE;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,eACFlB,OAAA;YACImB,IAAI,EAAC,MAAM;YACXC,WAAW,EAAC,SAAS;YACrBC,QAAQ,EAAGC,KAAK,IAAK;cACjBd,OAAO,CAACc,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;YAC/B;UAAE;YAAAT,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OACL,CAAC,eACFlB,OAAA;YAAQyB,OAAO,EAAEd,QAAS;YAAAE,QAAA,EAAC;UAAW;YAAAE,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAQ,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC9C,CAAC,gBAENlB,OAAA,CAACF,IAAI;UAACG,MAAM,EAAEA,MAAO;UAACI,QAAQ,EAAEA,QAAS;UAACE,IAAI,EAAEA;QAAK;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE;MAC1D;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACA;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACL,CAAC;AAEd,CAAC;AAACd,EAAA,CA3CID,UAAU;AAAAuB,EAAA,GAAVvB,UAAU;AA6ChB,eAAeA,UAAU;AAAA,IAAAuB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}